[project]
name = 'cinemabot'
version = "1.0.0"
description = "Bot for finding films for evening"
requires-python = ">=3.11"
authors = [
    { name = "Anfimov Dima", email = "danfimov@yandex.ru" },
]
dependencies = [
    "aiogram>=3.19.0",
    "alembic>=1.15.2",
    "asyncpg>=0.30.0",
    "greenlet>=3.1.1",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.1",
    "pyyaml>=6.0.2",
    "redis>=5.2.1",
    "sqlalchemy>=2.0.40",
    "uvloop>=0.21.0",
]
package-mode = false

[dependency-groups]
dev = [
    "aresponses>=3.0.0",
    "configargparse>=1.7",
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.4",
]

[tool.pytest]
python_files = "test_*.py"
python_classes = ["*Test", "Test*"]
python_functions = "test_*"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "def __repr__",
    "def __str__",
    "def __unicode__",
]
show_missing = true
skip_empty = true
omit = [
    "*/__init__.py",
    "cinemabot/migrator/env.py",
    "cinemabot/database/pool_manager",
    "cinemabot/config",
]

[tool.coverage.html]
directory = "pytest-cov-report"

[tool.coverage.run]
branch = true
concurrency = ['thread', 'greenlet']

[tool.pytest.ini_options]
pythonpath = [
  "."
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks unit tests",
    "integration: marks tests with real infrastructure env",
    "linting: marks tests as linter/static analyzers",
]

[tool.ruff]
line-length = 200
target-version = "py311"

[tool.ruff.lint]
ignore = []
select = ["E", "F", "I001"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
known-local-folder = ["cinemabot"]
lines-after-imports = 2

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
plugins = ["sqlalchemy.ext.mypy.plugin"]
